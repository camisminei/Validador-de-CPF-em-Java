a) Interface Tributavel
 M√©todo:
a) double calcularImpostos();
Este m√©todo ser√° implementado nas classes filhas de Funcion√°rio. O m√©todo retornar o
valor do (INSS + IR) que ser√° descontado do sal√°rio do funcion√°rio, de acordo com o
valor recebido no m√™s.
(b) Interface Verificavel
 M√©todos:
a) boolean validarCPF(String CPF);
b) void solicitarNovoCPF();
(c) Classe Pessoa (Abstrata)
 Implementa a classe Verificavel
 Atributos privados:
String nome; String cpf; String sexo; String celular; String email;
 1 Construtor
a) public Pessoa(String nome, String cpf, String sexo, String celular, String email)
obs: no construtor deve-se validar o CPF antes de atribuir o valor do cpf
Ent√£o √© preciso chamar o m√©todo para validar CPF
Se o CPF estiver correto, ele ser√° atribu√≠do,
Caso contr√°rio dever√° solicitar um novo valor para o cpf
 M√©todos:
a) @Override
public boolean validarCPF(String CPF)
este m√©todo ter√° que validar o CPF
b) @Override
public void solicitarNovoCPF()
este m√©todo solicita um novo CPF, at√© que o valor do CPF informado esteja correto
(d) Classe Endere√ßo
 Atributos:
String rua; String numero; String complemento; String bairro;
String cidade; String cep;
 2 construtores:
a) Para endere√ßo completo
public Endereco(String rua, String numero, String complemento, String bairro, String
cidade, String cep)
b) Para endere√ßo sem complemento
public Endereco(String rua, String numero, String bairro, String cidade, String cep)
 M√©todos:
a) gets e sets
b) public String toString()
retorna uma String com o endere√ßo
(e) Classe Funcionario (Abstrata)
 Estende a classe Pessoa
 Implementa a classe Tribut√°vel
 Tem um objeto do tipo Endereco
 1 construtor com os par√¢metros de pessoa e o Endereco
 M√©todos:
a) public abstract double calcularSalario();
(f) Classe FuncionarioMensalista
 Estende a classe Funcionario
 Atributo: private double salarioMensal
 1 construtor com os par√¢metros de Funcion√°rio e o salarioMensal
 M√©todos:
a)gets e sets
b)@Override
calcularSal√°rio()
Retorna o valor do getSalarioMensal() ÙÄÄÄ calcularImposto();
c) @Override
double calcularImpostos();
O m√©todo retornar o valor do (INSS + IR) que ser√° descontado do sal√°rio do funcion√°rio,
de acordo com o valor recebido no m√™s.
d) @Override
public String toString()
retorna uma String com o nome do funcion√°rio, o endere√ßo e o sal√°rio que ele recebeu
(g) Classe FuncionarioHorista
 Estende a classe Funcionario
 Atributos:
private double salarioHora //valor do sal√°rio por hora
private double horas //total de horas trabalhadas no m√™s
 1 construtor com os par√¢metros de Funcion√°rio e o valor do salarioHora que o funcion√°rio
ir√° receber. O total de horas trabalhadas no m√™s inicialmente ser√° 0.
 M√©todos:
a)gets e sets
b)@Override
calcularSal√°rio()
Retorna o valor do (getSalarioHora()  getHoras()) ÙÄÄÄ calcularImposto();
c) @Override
double calcularImpostos();
O m√©todo retornar o valor do (INSS + IR) que ser√° descontado do sal√°rio do funcion√°rio,
de acordo com o valor recebido no m√™s.
d)@Override
public String toString()
retorna uma String com o nome do funcion√°rio, o endere√ßo e o sal√°rio que ele recebeu
Classe FuncionarioComissionado
 Estende a classe Funcionario
 Atributos:
private double vendasBrutas //valor total das vendas efetuadas no m√™s
private double taxaComissao
 1 construtor com os par√¢metros de Funcion√°rio e a taxaCamissao (porcentagem da comiss√£o)
combinada no contrato. O valor das vendasBrutas no m√™s, inicialmente ser√°
zero.
 M√©todos:
a) gets e sets
b) @Override
calcularSal√°rio() Retorna o valor: (getTaxaComissao()getV endasBrutas())ÙÄÄÄcalcularImposto()c) @Override
double calcularImpostos();
O m√©todo retornar o valor do (INSS + IR) que ser√° descontado do sal√°rio do funcion√°rio,
de acordo com o valor recebido no m√™s.
d)@Override
public String toString()
retorna uma String com o nome do funcion√°rio, o endere√ßo e o sal√°rio que ele recebeu